<?xml version="1.0"?>
<!-- Launch MPPI, costmap_2d, and Rviz -->
<launch>
	<!-- \param "final_goal" refers to the final pose to be reached in [x, y, theta] in [m, m, deg.]     -->
   	<arg name="final_goal" default="[4, 4, 0.785]"/> 				<!-- For Maze 1, first mission, MU1  -->  
   	<!-- <arg name="final_goal" default="[8, -8, 2.97]"/> -->  		<!-- For Maze 1, second mission, MU2 --> 
   	<!-- <arg name="final_goal" default="[20, 20, 0.785]"/> --> 	<!-- For Forest 1, (0.2 tress/m2)    -->
	<arg name="normal_dist" default="false" />
	<arg name="gp_mppi" default="false" />
	<arg name="recovery_mode" default="false" /> 	
   	
	<!-- \param "dist_type" to set the distribution that will be used for generating the control noise
			# 0: Normal (Gaussian) distribution
			# 1: Normal and LogNormal (NLN) mixture -->
	<arg name="dist_type" default="0" if="$(arg normal_dist)"/>
	<arg name="dist_type" default="1" unless="$(arg normal_dist)"/>	

	<!-- \param "std_n" to set the standard deviation of Normal distribution for both MPPI and log-MPPI -->
	<arg name="std_n" default="[0.152, 0.166]" if="$(arg normal_dist)"/> 
	<arg name="std_n" default="[0.045, 0.047]" unless="$(arg normal_dist)"/> 

	<!-- \param "lambda" is the inverse temperature which determines how selective the weighted average of the trajectories is -->
	<arg name="lambda" default="0.572" if="$(arg normal_dist)"/> 
	<arg name="lambda" default="0.169" unless="$(arg normal_dist)"/> 
       
	<!-- \param "print_out" prints out the current state and the optimal control generated by controller -->
   	<arg name="print_out" default="false" />	
	
	<!-- \param "without_heading" allows navigation without taking into account the heading of the robot, given the presence of a  		360-degree LiDaR. For GP-MPPI, it should be set to false, as the cost function of the GP considers the heading of the robot. -->
	<arg name="without_heading" default="false" />
	
	<!-- Launch MPPI and its parameters -->
	<node name="mppi_control" pkg="mppi_control" type="mppi_control_node.py" output="screen">
		<rosparam command="load" file="$(find mppi_control)/resources/mppi_params/mppi_params_sim.yaml" />
		<rosparam param="final_goal" subst_value="True">$(arg final_goal)</rosparam>
		<rosparam param="std_n" subst_value="True">$(arg std_n)</rosparam>
		<param name="lambda" type="double" value="$(arg lambda)"/>
		<param name="dist_type" type="int" value="$(arg dist_type)"/>
		
		<param name="print_out" type="bool" value="$(arg print_out)"/>	
		<param name="without_heading" type="bool" value="$(arg without_heading)" />
		<param name="gp_mppi" type="bool" value="$(arg gp_mppi)"/>
		<param name="recovery_mode" type="bool" value="$(arg recovery_mode)"/>

		<param name="results_folder" value="$(find mppi_control)/results/sim_results"/>	
		<remap from="odom" to="ground_truth/odom" />   			<!-- Should be used in the case of intensive simulation         -->
		<!-- <remap from="odom" to="odometry/filtered" /> -->   <!-- Should be used in the real-world test with Wheels Odometry -->
		<!--<remap from="odom" to="aft_mapped_to_init" /> -->   <!-- Should be used in the real-world test with Velodyne "LOAM" -->
		<remap from="goal" to="move_base_simple/goal" />
		<remap from="local_costmap" to="move_base/local_costmap/costmap" /> 
	</node> 
</launch>


